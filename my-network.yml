Description: >
  Xiaosha - network / Udagram 2020

Parameters:
  EnvironmentName:
    Description: An Environment name that will be prefixed to Udagram resources.
    Type: String
    Default: UdagramProject
   
  VpcCIDR:
    Description: The CIDR range for the Udagram Application VPC.
    Type: String
    Default: 10.0.0.0/16
    
  PrivateSubnet1CIDR:
    Description: CIDRBlock for Private Subnet 1 within the VPC
    Type: String
    Default: 10.0.2.0/24
   
  PrivateSubnet2CIDR:
    Description: CidrBlock for Private Subnet 2 within the VPC
    Type: String
    Default: 10.0.3.0/16

  PublicSubnet1CIDR:
    Description: CidrBlock for Public Subnet 1 within the VPC
    Type: String
    Default: 10.0.0.0/24
  
  PublicSubnet2CIDR:
    Description: CidrBlock for Public Subnet 2 within the VPC
    Type: String
    Default: 10.0.1.0/24  
    
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Udagram Application Network Configuration"
        Parameters:
          - EnvironmentName
          - VpcCIDRBlock
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
                    
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName
        
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # --------------------- Subnets --------------------- #
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Sub "${EnvironmentName} Public Subnet (AZ1)" 

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Sub "${EnvironmentName} Public Subnet (AZ2)"      

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Sub "${EnvironmentName} Private Subnet (AZ1)" 

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Sub "${EnvironmentName} Private Subnet (AZ2)"  

  # --------------------- NAT --------------------- #
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties: 
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties: 
      Domain: vpc    

  NatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1 # NG should be in a public subnet

  NatGateway2: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2 

  # --------------------- Route Table --------------------- #
  PublicRouteTable: # create a table
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Routes
      - Key: Network
        Value: Public

  DefaultPublicRoute: # define the default rule of the table for IG
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  PublicSubnet1RouteTableAssociation: # associate table to public subnet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation: # associate table to public subnet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1: # create a table
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1: # define default rule of privRT1 for NG1
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1 # all private subnets outbound traffic goes to NG

  PrivateSubnet1RouteTableAssociation: # associate privRT1 to private subnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1    

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2   

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

Outputs:
  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  SubnetIds:
    Description: All subnets in the VPC
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
    Export:  
      Name: !Sub ${EnvironmentName}-SUBNETS

  PublicSubnets:
    Description: Output Public Subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-PUB-NETS

  PublicSubnet1:
    Description: A reference to the private subnet 1 in AZ1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PUB1-SN  
  
  PublicSubnet2:
    Description: A reference to the private subnet 2 in AZ2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PUB2-SN           

  PrivateSubnets:
    Description: Output Private Subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-PRIV-NETS